#!/bin/bash

VERSION="1.4.1"
LOG_DIR="/var/log/restoremysql"
FORCE_LOG=false
DROP_IF_EXISTS=false
SKIP_CREATE=false

show_help() {
  cat <<EOF
Uso:
  restoremysql [opciones]

Opciones:
  --log               Guarda logs de todas las restauraciones (éxito o error)
  --drop-if-exists    Borra la base si ya existe antes de restaurar
  --skip-create       No crea la base (debe existir previamente)
  --help              Muestra esta ayuda
  --version           Muestra la versión
EOF
}

# Parsear argumentos
for arg in "$@"; do
  case "$arg" in
    --help|-h) show_help; exit 0 ;;
    --version|-v) echo "restoremysql v$VERSION"; exit 0 ;;
    --log) FORCE_LOG=true ;;
    --drop-if-exists) DROP_IF_EXISTS=true ;;
    --skip-create) SKIP_CREATE=true ;;
  esac
done

# Verificar dependencias
for cmd in mysql pv; do
  if ! command -v "$cmd" &>/dev/null; then
    echo "[ERROR] El comando '$cmd' no está instalado. Instala con: sudo apt install $cmd"
    exit 1
  fi
done

# Crear directorio de logs
if [ ! -d "$LOG_DIR" ]; then
  sudo mkdir -p "$LOG_DIR"
  sudo chown "$USER":"$USER" "$LOG_DIR"
fi

echo "=== RESTAURADOR DE RESPALDOS MySQL v$VERSION ==="

read -p "Usuario MySQL: " DB_USER
read -s -p "Contraseña MySQL: " DB_PASS
echo

declare -a BASES
declare -a ARCHIVOS
declare -a EXITOSAS
declare -a FALLIDAS

while true; do
  read -p "Nombre de la base de datos a restaurar: " DB_NAME
  read -e -p "Ruta al archivo SQL de respaldo: " FILE_PATH

  if [ ! -f "$FILE_PATH" ]; then
    echo ">>> Archivo no encontrado: $FILE_PATH"
    continue
  fi

  BASES+=("$DB_NAME")
  ARCHIVOS+=("$FILE_PATH")

  read -p "¿Deseas cargar otro respaldo? (s/n): " continuar
  [[ "$continuar" =~ ^[Ss]$ ]] || break
done

LOGFILE="$LOG_DIR/restore_$(date +%Y%m%d_%H%M%S).log"
global_start=$(date +%s)

show_progress() {
  local file="$1"
  local db="$2"
  local tmpfile=$(mktemp)
  local wrapped_file=$(mktemp --suffix=.sql)

  echo -e "\n>>> Restaurando '$db' desde '$file'..."
  local start_time=$(date +%s)

  if [ "$DROP_IF_EXISTS" = true ]; then
    mysql -u "$DB_USER" -p"$DB_PASS" -e "DROP DATABASE IF EXISTS \`$db\`;" 2>>"$tmpfile"
  fi

  if [ "$SKIP_CREATE" != true ]; then
    mysql -u "$DB_USER" -p"$DB_PASS" -e "CREATE DATABASE IF NOT EXISTS \`$db\`;" 2>>"$tmpfile"
  fi

  # Preparar archivo temporal seguro y limpio
  echo "SET autocommit=0; SET foreign_key_checks=0;" > "$wrapped_file"
  cat "$file" >> "$wrapped_file"
  echo -e "\nCOMMIT;\nSET foreign_key_checks=1;" >> "$wrapped_file"

  # Restauración con barra de progreso (visual)
  pv --progress --eta "$wrapped_file" | mysql -u "$DB_USER" -p"$DB_PASS" "$db" 2>"$tmpfile"

  local end_time=$(date +%s)
  local duration=$((end_time - start_time))

  if grep -q 'ERROR' "$tmpfile"; then
    echo ">>> [ERROR] Fallo al restaurar '$db'. Ver log en: $LOGFILE"
    FALLIDAS+=("$db")
    {
      echo "[$(date)] ERROR restaurando '$db' desde '$file'"
      cat "$tmpfile"
      echo "-----------------------------------------------"
    } >> "$LOGFILE"
  else
    echo ">>> Restauración completada para '$db' en ${duration}s."
    EXITOSAS+=("$db")
    if [ "$FORCE_LOG" = true ]; then
      {
        echo "[$(date)] ÉXITO restaurando '$db' desde '$file' en ${duration}s"
        echo "-----------------------------------------------"
      } >> "$LOGFILE"
    fi
  fi

  rm -f "$tmpfile" "$wrapped_file"
}

for index in "${!BASES[@]}"; do
  show_progress "${ARCHIVOS[$index]}" "${BASES[$index]}"
done

global_end=$(date +%s)
global_duration=$((global_end - global_start))

echo
echo "=== RESUMEN FINAL ==="
echo "Restauraciones exitosas: ${#EXITOSAS[@]}"
for db in "${EXITOSAS[@]}"; do echo " - $db"; done

echo "Restauraciones con error: ${#FALLIDAS[@]}"
for db in "${FALLIDAS[@]}"; do echo " - $db"; done

echo "Tiempo total: ${global_duration}s"
[[ "${#FALLIDAS[@]}" -gt 0 ]] && echo "[!] Revisa el log: $LOGFILE"
echo "========================="

